package tracer.runtime;

/*Generated by MPS */

import java.text.SimpleDateFormat;
import java.util.Date;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class Tracer {
  public static void constructorCall(TracerContext context, String name) {
    if (context.time) {
      printDataTime();
    }
    System.out.println("constructor call: " + name);
  }



  public static <T> T constructorReturn(TracerContext context, String name, T value) {
    if (context.time) {
      printDataTime();
    }
    System.out.println("return from constructor " + name + ". Returning object reference is " + value);
    return value;
  }



  public static <T> T assignment(TracerContext context, String name, T value, String op) {
    if (context.time) {
      printDataTime();
    }
    System.out.println("assignment: " + name + " " + op + " " + value);
    return value;
  }



  public static <T> T unaryOperation(TracerContext context, String name, T value, String op) {
    if (context.time) {
      printDataTime();
    }
    System.out.println("modification (" + op + "): " + name + " = " + value);
    return value;
  }



  public static <T> T varReference(TracerContext context, String name, T value) {
    if (context.time) {
      printDataTime();
    }
    System.out.println("variable reference: " + name + " = " + value);
    return value;
  }



  public static void call(TracerContext context, String name) {
    if (context.time) {
      printDataTime();
    }
    System.out.println("method call: " + name);
  }



  public static void returnVoid(TracerContext context, String name) {
    if (context.time) {
      printDataTime();
    }
    System.out.println("return from method " + name);
  }



  public static <T> T returnValue(TracerContext context, String name, T value) {
    if (context.time) {
      printDataTime();
    }
    System.out.println("return from method " + name + ". Returning value is " + value);
    return value;
  }



  private static void printDataTime() {
    System.out.print(new SimpleDateFormat("dd.MM.YYY HH:mm:ss").format(new Date()) + " ");
  }



  public static String getVariableName(SNode n) {
    String result;
    if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.baseLanguage.structure.VariableReference")) {
      result = SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.as(n, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false), "name");
    } else {
      SNode fld = SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.as(n, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"), "fieldDeclaration", false);
      result = SPropertyOperations.getString(SNodeOperations.getAncestor(fld, "jetbrains.mps.baseLanguage.structure.Classifier", false, false), "name") + "." + SPropertyOperations.getString(fld, "name");
    }
    return result;
  }
}
