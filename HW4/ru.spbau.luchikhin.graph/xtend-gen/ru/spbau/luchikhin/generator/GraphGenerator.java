/**
 * generated by Xtext
 */
package ru.spbau.luchikhin.generator;

import com.google.common.collect.Iterators;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import ru.spbau.luchikhin.graph.Connection;
import ru.spbau.luchikhin.graph.NoConnection;
import ru.spbau.luchikhin.graph.Node;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GraphGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterator<Node> _filter = Iterators.<Node>filter(_allContents, Node.class);
    final Function1<Node, CharSequence> _function = new Function1<Node, CharSequence>() {
      public CharSequence apply(final Node it) {
        return GraphGenerator.this.compile(it);
      }
    };
    Iterator<CharSequence> _map = IteratorExtensions.<Node, CharSequence>map(_filter, _function);
    String _join = IteratorExtensions.join(_map, "\n");
    fsa.generateFile("Graph.java", _join);
  }
  
  public CharSequence compile(final Node n) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = n.getName();
    _builder.append(_name, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public List<Class> getDependencies() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    EObject _connections = n.getConnections();
    CharSequence _compileConnection = this.compileConnection(_connections);
    _builder.append(_compileConnection, "\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileConnection(final EObject object) {
    if ((object instanceof Connection)) {
      return this.compile(((Connection) object));
    }
    if ((object instanceof NoConnection)) {
      return this.compile(((NoConnection) object));
    }
    return null;
  }
  
  public CharSequence compile(final NoConnection _) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Collections.emptyList()");
    return _builder;
  }
  
  public CharSequence compile(final Connection connections) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Arrays.asList(");
    EList<Node> _connection = connections.getConnection();
    final Function1<Node, String> _function = new Function1<Node, String>() {
      public String apply(final Node it) {
        String _name = it.getName();
        return (_name + ".class");
      }
    };
    List<String> _map = ListExtensions.<Node, String>map(_connection, _function);
    String _join = IterableExtensions.join(_map, ", ");
    _builder.append(_join, "");
    _builder.append(")");
    return _builder;
  }
}
