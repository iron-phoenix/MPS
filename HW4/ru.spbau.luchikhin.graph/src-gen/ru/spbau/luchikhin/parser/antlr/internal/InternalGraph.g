/*
* generated by Xtext
*/
grammar InternalGraph;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ru.spbau.luchikhin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ru.spbau.luchikhin.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ru.spbau.luchikhin.services.GraphGrammarAccess;

}

@parser::members {

 	private GraphGrammarAccess grammarAccess;
 	
    public InternalGraphParser(TokenStream input, GraphGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GraphGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNodesNodeParserRuleCall_0()); 
	    }
		lv_nodes_0_0=ruleNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"nodes",
        		lv_nodes_0_0, 
        		"Node");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='node' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeAccess().getNodeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getConnectionsConnectionParserRuleCall_2_0_0()); 
	    }
		lv_connections_2_1=ruleConnection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"connections",
        		lv_connections_2_1, 
        		"Connection");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getNodeAccess().getConnectionsNoConnectionParserRuleCall_2_0_1()); 
	    }
		lv_connections_2_2=ruleNoConnection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeRule());
	        }
       		set(
       			$current, 
       			"connections",
        		lv_connections_2_2, 
        		"NoConnection");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNodeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleConnection
entryRuleConnection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConnectionRule()); }
	 iv_ruleConnection=ruleConnection 
	 { $current=$iv_ruleConnection.current; } 
	 EOF 
;

// Rule Connection
ruleConnection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='is connected with ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConnectionAccess().getIsConnectedWithKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getConnectionAccess().getConnectionNodeCrossReference_1_0()); 
	}

)
)(	otherlv_2=', ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConnectionAccess().getCommaSpaceKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConnectionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getConnectionAccess().getConnectionNodeCrossReference_2_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleNoConnection
entryRuleNoConnection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoConnectionRule()); }
	 iv_ruleNoConnection=ruleNoConnection 
	 { $current=$iv_ruleNoConnection.current; } 
	 EOF 
;

// Rule NoConnection
ruleNoConnection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_connection_0_0=	'isolated' 
    {
        newLeafNode(lv_connection_0_0, grammarAccess.getNoConnectionAccess().getConnectionIsolatedKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoConnectionRule());
	        }
       		setWithLastConsumed($current, "connection", lv_connection_0_0, "isolated");
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


