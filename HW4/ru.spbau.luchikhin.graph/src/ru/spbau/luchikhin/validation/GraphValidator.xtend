/*
 * generated by Xtext
 */
package ru.spbau.luchikhin.validation
import org.eclipse.xtext.validation.Check
import ru.spbau.luchikhin.graph.Node
import ru.spbau.luchikhin.graph.Model
import ru.spbau.luchikhin.services.GraphGrammarAccess.ModelElements
import ru.spbau.luchikhin.graph.GraphPackage
import ru.spbau.luchikhin.graph.Connection

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class GraphValidator extends AbstractGraphValidator {

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}

	@Check
	def void checkNodeNameIsUnique(Node node) {
		var model = (node.eContainer() as Model)
		for (other : model.nodes) {
			if (node.name.equals(other.name) && node != other) {
				error("Node names have to be unique", GraphPackage.Literals.NODE__NAME);
				return;
			}
		}
	}
		
	@Check
	def void checkConnectionIsUnique(Connection connection) {
		for (one : connection.connection) {
			var count = 0;
			for (other : connection.connection) {
				if (one.name.equals(other.name)) count += 1;
			}
			if (count > 1) {
				error("Node names have to be unique in connections", GraphPackage.Literals.CONNECTION__CONNECTION);
				return;
			}
		}
	}
}
